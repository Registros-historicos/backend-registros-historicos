name: CI/CD VM Docker

on:
  push:
    branches: [ master, release ]
  pull_request:
    branches: [ master, release ]

# Necesario para publicar en GHCR con GITHUB_TOKEN
permissions:
  contents: read
  packages: write

# Evita pipelines duplicados por branch
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"
  DJANGO_SETTINGS_MODULE: "config.settings.dev"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements/base.txt
            requirements/dev.txt
            requirements/prod.txt
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/dev.txt
          pip install -r requirements/prod.txt
          pip install flake8 bandit


  test:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:16
        ports:
          - "5432:5432"          
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd="pg_isready -U test -d postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      PGHOST: 127.0.0.1
      PGPORT: 5432
      PGUSER: test
      PGPASSWORD: test
      PGDB: test_ci_${{ github.run_id }}_${{ github.run_number }}



    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements/base.txt
            requirements/dev.txt
            requirements/prod.txt

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/dev.txt
          pip install -r requirements/prod.txt
          pip install flake8 bandit
      

      - name: Install psql client
        run: |
          sudo apt-get update 
          sudo apt-get install -y postgresql-client

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d postgres && break
            echo "Postgres no listo aún, reintentando..."
            sleep 2
          done
          pg_isready -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d postgres

      - name: Create ephemeral CI database
        id: db
        run: |
            set -e
            createdb -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" "$PGDB"
            echo "dbname=$PGDB" >> "$GITHUB_OUTPUT"
            echo "DATABASE_URL=postgresql://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDB}" >> "$GITHUB_ENV"
            echo "Created ephemeral DB: $PGDB"


      # Usa la nueva DATABASE_URL 

      - name: Set Django env (CI)
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "DEV_DB_NAME=${{ env.PGDB }}" >> $GITHUB_ENV
          echo "DEV_DB_USER=${{ env.PGUSER }}" >> $GITHUB_ENV
          echo "DEV_DB_PASSWORD=${{ env.PGPASSWORD }}" >> $GITHUB_ENV
          echo "DEV_DB_HOST=${{ env.PGHOST }}" >> $GITHUB_ENV
          echo "DEV_DB_PORT=${{ env.PGPORT }}" >> $GITHUB_ENV

          echo "DEBUG=True" >> $GITHUB_ENV
          echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> $GITHUB_ENV

      - name: Django checks
        run: python manage.py check

      - name: Migrations
        run: python manage.py migrate --noinput

      - name: Migrations
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: python manage.py migrate --noinput

      - name: Load SQL functions (if any)
        if: ${{ hashFiles('sql/functions/**/*.sql') != '' }}
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          set -e
          shopt -s globstar nullglob
          for f in sql/functions/**/*.sql; do
            echo " > $f"
            psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -f "$f"
          done

      - name: Run tests
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: python manage.py test -v 2

      - name: Drop ephemeral CI database
        if: always()
        env:
          PGHOST: 127.0.0.1
          PGPORT: 5432
          PGUSER: test_ci_user
          PGPASSWORD: test_ci_pass
        run: |
          PGDB="${{ steps.db.outputs.PGDB }}"
          if [ -n "$PGDB" ]; then
            dropdb "$PGDB" || true
            echo "Dropped ephemeral DB: $PGDB"
          fi

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - uses: actions/checkout@v4

      # Builder con driver 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Prepare image name (lowercase)
        id: prep
        run: |
          REPO_NAME="${GITHUB_REPOSITORY##*/}"   # ej: backend-registros-historicos
          IMAGE="docker.io/${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME"
          IMAGE_LC=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
          echo "image=$IMAGE_LC" >> "$GITHUB_OUTPUT"


      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.prep.outputs.image }}:latest
            ${{ steps.prep.outputs.image }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  deploy_vm:
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v4

      - name: List deploy folder
        run: |
          ls -la || true
          ls -la deploy || true
          find deploy -maxdepth 2 -type f || true

      - name: Copy deploy files to VM (SCP)
        if: ${{ hashFiles('deploy/**') != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          port: ${{ secrets.VM_SSH_PORT || 22 }}
          key: ${{ secrets.VM_SSH_KEY }}
          passphrase: ${{ secrets.VM_SSH_PASSPHRASE || '' }}
          source: "deploy/**"
          target: "~/app"



      - name: Deploy over SSH (DockerHub)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          port: ${{ secrets.VM_SSH_PORT || 22 }}
          key: ${{ secrets.VM_SSH_KEY }}
          passphrase: ${{ secrets.VM_SSH_PASSPHRASE || '' }}
          script: |
            set -euo pipefail
            mkdir -p ~/app
            cd ~/app

            echo "PWD=$(pwd)"
            echo "==> ~/app:"; ls -la || true
            echo "==> ~/app/deploy:"; ls -la deploy || true

            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            export APP_TAG="${{ github.sha }}" 
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login docker.io -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            if command -v docker compose >/dev/null 2>&1; then
              COMPOSE="docker compose"
              docker compose version || true
            else
              COMPOSE="docker-compose"
              docker-compose --version || true
            fi

            COMPOSE_FILE="deploy/docker-compose.yml"
            [ -f "$COMPOSE_FILE" ] || { echo "No se encontró $COMPOSE_FILE"; exit 1; }

            $COMPOSE -f "$COMPOSE_FILE" pull
            $COMPOSE -f "$COMPOSE_FILE" up -d --remove-orphans
            docker image prune -f
            $COMPOSE -f "$COMPOSE_FILE" ps

            echo "Deploy listooo "
