name: CI/CD VM Docker

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

# Necesario para publicar en GHCR con GITHUB_TOKEN
permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: "3.12"
  DJANGO_SETTINGS_MODULE: "config.settings.dev"
  POSTGRES_USER: "test"
  POSTGRES_PASSWORD: "test"
  POSTGRES_DB: "testdb"
  POSTGRES_HOST: "127.0.0.1"
  POSTGRES_PORT: "5432"
  DATABASE_URL: "postgresql://test:test@127.0.0.1:5432/testdb"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements/base.txt ]; then pip install -r requirements/base.txt; else pip install -r requirements.txt; fi
          if [ -f requirements/dev.txt ]; then pip install -r requirements/dev.txt; fi
          pip install flake8 bandit
      - name: Flake8
        run: flake8 .
      - name: Bandit (quick)
        run: bandit -q -r apps config || true

  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }}"
          --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements/base.txt ]; then pip install -r requirements/base.txt; else pip install -r requirements.txt; fi
          if [ -f requirements/dev.txt ]; then pip install -r requirements/dev.txt; fi
      - name: Export .env (optional)
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_DEBUG: "False"
          envkey_ALLOWED_HOSTS: "localhost,127.0.0.1"
          envkey_DATABASE_URL: ${{ env.DATABASE_URL }}
          file_name: .env
          fail_on_empty: false
      - name: Django checks
        env: { DATABASE_URL: ${{ env.DATABASE_URL }} }
        run: python manage.py check
      - name: Migrations (si usas ORM)
        env: { DATABASE_URL: ${{ env.DATABASE_URL }} }
        run: python manage.py migrate --noinput
      - name: Install psql client (for SQL functions)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      - name: Cargar funciones SQL (opcional)
        if: ${{ hashFiles('sql/functions/**/*.sql') != '' }}
        env: { PGPASSWORD: ${{ env.POSTGRES_PASSWORD }} }
        run: |
          for f in sql/functions/**/*.sql; do
            [ -f "$f" ] || continue
            echo " > $f"
            psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -f "$f"
          done
      - name: Run tests
        env: { DATABASE_URL: ${{ env.DATABASE_URL }} }
        run: python manage.py test -v 2

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v4
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_vm:
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - uses: actions/checkout@v4

      - name: Copy deploy files to VM (SCP)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}         # ej: 20.XX.XX.XX
          username: ${{ secrets.VM_USER }}     # ej: azureuser
          port: ${{ secrets.VM_SSH_PORT || 22 }}
          key: ${{ secrets.VM_SSH_KEY }}       # pega el PEM en el secret
          passphrase: ${{ secrets.VM_SSH_PASSPHRASE || '' }}
          source: "deploy/*"
          target: "~/app"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          port: ${{ secrets.VM_SSH_PORT || 22 }}
          key: ${{ secrets.VM_SSH_KEY }}
          passphrase: ${{ secrets.VM_SSH_PASSPHRASE || '' }}
          script: |
            set -e
            cd ~/app
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker compose pull
            docker compose up -d
            docker image prune -f
